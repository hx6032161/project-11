/*
 *  Copyright 2006, Shanghai Huateng Software Systems Co., Ltd.
 *  All right reserved.
 *
 *  THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF SHANGHAI HUATENG
 *  SOFTWARE SYSTEMS CO., LTD.  THE CONTENTS OF THIS FILE MAY NOT
 *  BE DISCLOSED TO THIRD PARTIES, COPIED OR DUPLICATED IN ANY FORM,
 *  IN WHOLE OR IN PART, WITHOUT THE PRIOR WRITTEN PERMISSION OF
 *  SHANGHAI HUATENG SOFTWARE SYSTEMS CO., LTD.
 *
 *  $Id$
 *
 *  功能: 配置文件操作
 *
 *  Edit History:
 *
 */
#include <stdio.h>
#include <errno.h>
#include <time.h>
#include <string.h>
#include <sys/types.h>
#include <sys/timeb.h>

/*******************************************************
**函数名称: CommonRTrim                               **
**功能描述: 清右空格                                  **
**作    者:                                           **
**输入参数:                                           **
**          caDest 源数据                             **
**输出参数:                                           **
**          caDest 目的数据                           **
**返回值:                                             **
*******************************************************/
void CommonRTrim(char *caDest)
{
    int i;
    for (i = strlen(caDest)-1 ; i>=0 ; i-- ) {
        if (caDest[i] !=' ' && caDest[i] !='\t' && caDest[i] !='\r' && caDest[i] !='\n')
            break;
    }
    caDest[i+1] = 0;
}

/*******************************************************
**函数名称: CommonRTrim                               **
**功能描述: 清左空格                                  **
**作    者:                                           **
**输入参数:                                           **
**          caDest 源数据                             **
**输出参数:                                           **
**          caDest 目的数据                           **
**返回值:                                             **
*******************************************************/
void CommonLTrim(char *caDest)
{
    char *s = caDest;

    while ( *s )
        if ( (*s == ' ') || (*s == '\t') || (*s == '\r') || (*s == '\n') )
          ++s;
        else
            break;

    if ( s > caDest )
        strcpy ( (char *)caDest, (char *)s );
}

/*******************************************************
**函数名称: IsDigitBuf                                **
**功能描述: 测试字符串中是否有阿拉伯数字              **
**作    者:                                           **
**输入参数:                                           **
**          sBuf：输入字符串                          **
**          nLen：字符串长度                          **
**输出参数:                                           **
**返回值:   0/1                                       **
*******************************************************/
int IsDigitBuf(char *sBuf, int nLen)
{
    int    i;

    if (nLen == 0)
        return 1;

    for (i = 0; i < nLen; i++)
        if (!isdigit(sBuf[i]))
            return 0;

    return 1;
}

/*******************************************************
**函数名称: GetTime_HHMMSS                            **
**功能描述: 获取时间                                  **
**作    者:                                           **
**输入参数:                                           **
**输出参数:                                           **
**          buff：得到的时间                          **
**返回值:                                             **
*******************************************************/
void GetTime_HHMMSS(char* buff)
{
    time_t now;
    struct tm * tTime;

    time(&now);
    tTime = localtime(&now);

    sprintf(buff, "%.2d%.2d%.2d", tTime->tm_hour,
            tTime->tm_min, tTime->tm_sec );
    return;
}


/*******************************************************
**函数名称: CommonGetCurrentDate                      **
**功能描述: 获取当前日期                              **
**作    者:                                           **
**输入参数:                                           **
**输出参数:                                           **
**          sCurrentDate：得到的日期                  **
**返回值:                                             **
*******************************************************/
void  CommonGetCurrentDate(char *sCurrentDate)
{
   time_t current;
   struct tm *tmCurrentTime;

   time(&current);
   tmCurrentTime = localtime(&current);
   sprintf(sCurrentDate, "%4d%02d%02d", tmCurrentTime->tm_year + 1900,
           tmCurrentTime->tm_mon + 1, tmCurrentTime->tm_mday);
}

/*******************************************************
**函数名称: CommonGetCurrentTime                      **
**功能描述: 获取当前时间                              **
**作    者:                                           **
**输入参数:                                           **
**输出参数:                                           **
**          sCurrentTime：得到的时间                  **
**返回值:                                             **
*******************************************************/
void CommonGetCurrentTime(char *sCurrentTime)
{
   time_t current;
   struct tm *tmCurrentTime;

   tzset();
   time(&current);
   tmCurrentTime = localtime(&current);
   sprintf(sCurrentTime, "%4d%02d%02d%02d%02d%02d",
           tmCurrentTime->tm_year + 1900, tmCurrentTime->tm_mon + 1,
           tmCurrentTime->tm_mday, tmCurrentTime->tm_hour,
           tmCurrentTime->tm_min, tmCurrentTime->tm_sec);
}

/*******************************************************
**函数名称: cf_open                                   **
**功能描述: 以只读方式打开文件                        **
**作    者:                                           **
**输入参数:                                           **
**          file：文件名                              **
**输出参数:                                           **
**返回值:  文件描述符                                 **
*******************************************************/
FILE* cf_open(const char *file)
{
    FILE *fpcfg = NULL; 

    fpcfg = fopen(file, "r");
    if (fpcfg  == NULL) {
        printf("fopen: [%s] error: [%d]\n", file, errno);
        return NULL;
    }

    return fpcfg;
}

/*******************************************************
**函数名称: cf_close                                  **
**功能描述: 关闭指定的文件描述符                      **
**作    者:                                           **
**输入参数:                                           **
**          fpcfg：文件描述符                         **
**输出参数:                                           **
**返回值:  0/1                                        **
*******************************************************/
int cf_close(FILE* fpcfg)
{
    if (fpcfg != NULL) 
        fclose(fpcfg);
    
    return 0;
}

/*******************************************************
**函数名称: cf_nextline                               **
**功能描述: 从文件中读取以字符串                      **
**作    者:                                           **
**输入参数:                                           **
**          fpcfg：文件描述符                         **
**          size： 获取字符串的大小                   **
**输出参数:                                           **
**          bp：获取的字符串                          **
**返回值:  0/-1                                       **
*******************************************************/
int cf_nextline(FILE* fpcfg, char *bp, int size)
{
    if (fpcfg == NULL)  return -1;
    fgets(bp, size, fpcfg);
    CommonRTrim(bp);
    CommonLTrim(bp);
    return 0;
}

/*******************************************************
**函数名称: cf_rewind                                 **
**功能描述: 重设文件流的读写位置为文件开头            **
**作    者:                                           **
**输入参数:                                           **
**          fpcfg：文件描述符                         **
**输出参数:                                           **
**返回值:  0/-1                                       **
*******************************************************/
int cf_rewind(FILE* fpcfg)
{
    if (fpcfg == NULL)  return -1;
    fseek(fpcfg, 0L, SEEK_SET);
    return 0;
}

/*******************************************************
**函数名称: cf_locate                                 **
**功能描述: 获取变量的值                              **
**作    者:                                           **
**输入参数:                                           **
**          fpcfg：文件描述符                         **
**          pname：变量名                             **
**          value：变量值                             **
**输出参数:                                           **
**返回值:  0/-1                                       **
*******************************************************/
int cf_locate(FILE* fpcfg, const char *pname, char *value)
{
    int   len;
    char  line[512 + 1];

    if (fpcfg == NULL) return -1;

    cf_rewind(fpcfg);
    while (!feof(fpcfg)) {
        memset(line, 0, sizeof(line));
        cf_nextline(fpcfg, line, sizeof(line));
        if (line[0] == '#') continue;
        if ((line[strlen(pname)] == 0x00 || line[strlen(pname)] == 0x20) &&
            !memcmp(line, pname, strlen(pname))) {
            break;
        }
    }

    if (feof(fpcfg)) return -1;

    strcpy(value, &line[strlen(pname)]);
    CommonRTrim(value);
    CommonLTrim(value);
    return 0;
}

/*******************************************************
**函数名称: cf_locatenum                              **
**功能描述: 获取变量的值的整型数                      **
**作    者:                                           **
**输入参数:                                           **
**          fpcfg：文件描述符                         **
**          pname：变量名                             **
**          value：变量值                             **
**输出参数:                                           **
**返回值:  0/-1                                       **
*******************************************************/
int cf_locatenum(FILE* fpcfg, const char *pname, int *value)
{
    char    buf[24 + 1];

    if (fpcfg == NULL) return -1;

    memset(buf, 0, sizeof(buf));
    if (cf_locate(fpcfg, pname, buf) < 0) return -1;
    if (!IsDigitBuf(buf, strlen(buf))) return -1;

    *value = atoi(buf);
    return 0;
}

/*******************************************************
**函数名称: cf_nextparm                               **
**功能描述: 获取变量的值                              **
**作    者:                                           **
**输入参数:                                           **
**          fpcfg：文件描述符                         **
**          pname：变量名                             **
**          value：变量值                             **
**输出参数:                                           **
**返回值:  0/-1                                       **
*******************************************************/
int cf_nextparm(FILE* fpcfg, const char *pname, char *value)
{
    char  line[512 + 1];

    if (fpcfg == NULL) return -1;

    while (!feof(fpcfg)) {
        memset(line, 0, sizeof(line));
        cf_nextline(fpcfg, line, sizeof(line));
        if (line[0] == '#') continue;
        if ((line[strlen(pname)] == 0x00 || line[strlen(pname)] == 0x20) &&
            !memcmp(line, pname, strlen(pname))) {
            break;
        }
    }

    if (feof(fpcfg)) 
        return -1;
    
    CommonLTrim(&line[strlen(pname)]);
    CommonRTrim(line); 
    strcpy(value, &line[strlen(pname)]);
    return 0;
}

/*******************************************************
**函数名称: cf_locate_group                           **
**功能描述: 获取组变量值                              **
**作    者:                                           **
**输入参数:                                           **
**          fpcfg：文件描述符                         **
**          pname：变量名                             **
**输出参数:                                           **
**返回值:  0/-1                                       **
*******************************************************/
int cf_locate_group(FILE* fpcfg, const char *pname)
{
    char  line[512 + 1];

    if (fpcfg == NULL) return -1;

    while (!feof(fpcfg)) {
        memset(line, 0, sizeof(line));
        cf_nextline(fpcfg, line, sizeof(line));
        if (line[0] == '#') continue;
        if ((line[5] == 0x00 || line[5] == 0x20) &&
            (memcmp(line, "GROUP", 5)))
            continue;

        CommonLTrim(&line[5]);
        if ((line[5 + strlen(pname)] == 0x00 || line[5 + strlen(pname)] == 0x20) &&
            (!memcmp(&line[5], pname, strlen(pname)))) 
            break;
    }

    if (feof(fpcfg))
        return -1;

    return 0;
}

/*******************************************************
**函数名称: cf_group_param                            **
**功能描述: 获取组变量值                              **
**作    者:                                           **
**输入参数:                                           **
**          fpcfg：文件描述符                         **
**          size：大小                                **
**输出参数:                                           **
**          bp:参数值                                 **
**返回值:  0/-1                                       **
*******************************************************/
int cf_group_param(FILE* fpcfg, char *bp, int size)
{
    char  line[512 + 1];
    
    if (fpcfg == NULL)  return -1;
    while (!feof(fpcfg)) {
        memset(line, 0, sizeof(line));
        cf_nextline(fpcfg, line, sizeof(line));
        if (line[0] == '#') continue;
        if ((line[9] == 0x00 || line[9] == 0x20) &&
            (!memcmp(line, "END_GROUP", 9)))
            return -1;
        memcpy(bp, line, (size > 512 ? 512 : size));
        return 0;
    }
}
/*******************************************************
**函数名称: cf_env_parse                              **
**功能描述: 解析env                                   **
**作    者:                                           **
**输入参数:                                           **
**          name：名字                                **
**          buf：源数据                               **
**输出参数:                                           **
**          value:值                                  **
**返回值:  0/-1                                       **
*******************************************************/
int cf_env_parse(char *buf, char* name, char *value)
{
    char *p;

    CommonRTrim(buf);
    CommonLTrim(buf);

    if (*buf == '#')
        return -1;

    p = strchr(buf, '=');
    if (p == NULL)
        return -1;
 
    memcpy(name, buf, p - buf);
    name[p-buf] = '\0';
    CommonRTrim(name);
    strcpy(value, p + 1);
    CommonRTrim(value);
    CommonLTrim(value);
    return 0;
}

   
