static char *Id = "$ID";
#include "C010Comm.h"
#include <string.h>

#define MAX_TCPCHD 200

#define COMI_MSG_WRITETO 60
#define COMI_MSG_READTO 60

#define RETRYNUM 5

void   	Wait();
void   	Wrmsg_to();
void   	Rdmsg_to();
void 	HandleExit(int n);

int 	ChdNum;
int 	socket_id_old,socket_id_new;
int 	return_flag=0;

msg_def MsgIn;
msg_def MsgOut;

struct  sockaddr_in local_addr;
int 	Local_len= sizeof( local_addr);

char		gsSrvId[SRV_ID_LEN+1];
char		gsToSrvId[SRV_ID_LEN+1];
char		gsSrvSeq[SRV_SEQ_ID_LEN+1];
char		gsLogFile[LOG_NAME_LEN_MAX];
T_SrvMsq	gatSrvMsq[SRV_MSQ_NUM_MAX];

Tbl_srv_inf_Def	tTblSrvInf;

void SaveMsg (long lPid);

int main(int argc, char *argv[])
{
  	int 		nRet;
	int 		i,nPid,port,ppid;
	long                lUsageKey;

	setbuf(stdout, NULL); 
	setbuf(stderr, NULL);

    if(argc < 5)
    {
        printf("Usage:%s srvid seq tosrvid port\n", argv[0]);
        exit(-1);
    }
printf("argvi111[%s][%s][%s][%s][%s]",argv[0],argv[1],argv[2],argv[3],argv[4]);
    strcpy(gsSrvId, argv[1]);
    strcpy(gsSrvSeq, argv[2]);
    strcpy(gsToSrvId, argv[3]);
	  port = atol(argv[4]);
	  
   nRet = DbsConnect ();
    if (nRet)
    {
        printf("OLDCommP nRet[%d] LINE[%d]\n", nRet, __LINE__);
        exit(-2);
    }

    /*if (getenv(SRV_USAGE_KEY))
        lUsageKey=atoi (getenv(SRV_USAGE_KEY));
    else {
        DbsDisconnect ();
        exit(-3);
    }*/
    memset ((char *)&tTblSrvInf, 0x00, sizeof (tTblSrvInf));
    memcpy (tTblSrvInf.srv_id, gsSrvId, SRV_ID_LEN);
    nRet = DbsSRVINF (DBS_SELECT, &tTblSrvInf);
    if (nRet)
    {
        printf("OLDCommP nRet[%d] LINE[%d] srvif[%s] key[%ld]\n", nRet, __LINE__,gsSrvId,tTblSrvInf.usage_key);
        DbsDisconnect ();
        exit(-2);
    }
    CommonRTrim(tTblSrvInf.srv_name);
    sprintf (gsLogFile, "%s.%s.log", tTblSrvInf.srv_name, gsSrvSeq);
    HtLog (gsLogFile, HT_LOG_MODE_NORMAL, __FILE__,__LINE__, "port: %ld.", port);
    memset ((char *)gatSrvMsq, 0, sizeof (gatSrvMsq));
    nRet = MsqInit (gsSrvId, gatSrvMsq);
    if (nRet)
    {
        HtLog (gsLogFile, HT_LOG_MODE_ERROR, __FILE__,__LINE__, "MsqInit error,%d", nRet);
        DbsDisconnect ();
        exit(-3);
    }

	/* set SIGTERM handling */
	if (sigset(SIGTERM, HandleExit) == SIG_ERR)
		HtLog (gsLogFile, HT_LOG_MODE_ERROR, __FILE__,__LINE__, "sigset SIGTERM error, %d.", errno);
  
	HtLog (gsLogFile, HT_LOG_MODE_NORMAL, __FILE__,__LINE__, "FromP Begin to create socket");

  	socket_id_old = Create_socket( port );

	HtLog (gsLogFile, HT_LOG_MODE_NORMAL, __FILE__,__LINE__,
  		"create socket OK!, socket_id_od = %d",
		socket_id_old);

  	ppid=getpid();

   	sigset(SIGCHLD, Wait);
   	while(1)
   	{
		HtLog (gsLogFile, HT_LOG_MODE_NORMAL, __FILE__,__LINE__,
				"OLDCommP child process num:%d",ChdNum);   

		while (ChdNum >= MAX_TCPCHD) sleep(1);

		HtLog (gsLogFile, HT_LOG_MODE_NORMAL, __FILE__,__LINE__,
			"begin to accept");

		socket_id_new = accept(socket_id_old, 
			(struct sockaddr *)&local_addr, &Local_len);
		if (socket_id_new <=0) 
		{
			if (errno==EINTR) 
			{
				HtLog (gsLogFile, HT_LOG_MODE_ERROR, __FILE__,__LINE__,"EINTR");
				continue;		
			}
			HtLog (gsLogFile, HT_LOG_MODE_ERROR, __FILE__,__LINE__,
	    			"accept error");
			sleep(2);
			continue; 
		}

		HtLog (gsLogFile, HT_LOG_MODE_NORMAL, __FILE__,__LINE__,
				"accepted the connect request; vc = %d", socket_id_new);

		nPid= fork();
		if (nPid < 0)
		{ 
			close(socket_id_new);
			HtLog (gsLogFile, HT_LOG_MODE_ERROR, __FILE__,__LINE__,
	   	   		"fork error");	
       		continue;
		}

		if (!nPid)
		{ 
    		nRet = DbsConnect ();
    		if (nRet)
    		{
				HtLog (gsLogFile, HT_LOG_MODE_ERROR, __FILE__,__LINE__,
        			"OLDCommP Connect DB nRet[%d]", nRet);
        		exit(-2);
    		}

			DoIt( socket_id_new );

			close(socket_id_new);

        	DbsDisconnect ();

			exit(0);
		}
		ChdNum++;
		close(socket_id_new);      
   	}

	DbsDisconnect ();

}

void Wait()
{ 
	int nPid, Status;
	while(TRUE)
	{ 
		nPid = waitpid((pid_t)(-1), &Status, WNOHANG|WUNTRACED);
		if (nPid > 0) 
		{
			if (--ChdNum == 0);
		}
		else
			break;
	}
}

DoIt(int socket_id)
{
 long   	nPid; 
 int		nMsgSource;
 int		nRet;
 int   		nMsgLen, nRetVal, nMpRetLen ;
 char   	sNetMsgBuf[BUF_SIZE];
 int 		nLen;
 unsigned char 	Buf_head[5];
 char		sMsgType[17];

   	nPid = getpid();

	HtLog (gsLogFile, HT_LOG_MODE_NORMAL, __FILE__,__LINE__,
		"begin read msg from p, pid = %ld", nPid);

	nMsgLen=ReadSocket(socket_id,sNetMsgBuf,BUF_SIZE);
	if (nMsgLen <=0) 
	{
		if (nMsgLen == E_SBREAK)
		{
			HtLog (gsLogFile, HT_LOG_MODE_ERROR, __FILE__,__LINE__,
				"read socket call");
			close(socket_id);
			exit(1);
		}
   		else 
			exit(-1);
	}

   	memset(&MsgOut,' ',sizeof(msg_def));
 	memcpy(MsgOut.msg_buf, gsSrvId, SRV_ID_LEN);
 	memcpy(MsgOut.msg_buf+SRV_ID_LEN, gsToSrvId, SRV_ID_LEN);
	memset(sMsgType,0,sizeof(sMsgType));
	sprintf(sMsgType,"%016ld",nPid);
 	memcpy(MsgOut.msg_buf+SRV_ID_LEN*2, sMsgType, FLD_MSQ_TYPE_LEN);
 	memcpy(MsgOut.msg_buf+SRV_ID_LEN*2+FLD_MSQ_TYPE_LEN, 
			sNetMsgBuf, nMsgLen);
	
	HtLog (gsLogFile, HT_LOG_MODE_NORMAL, __FILE__,__LINE__, 
		"send msg to %s,gatSrvMsq %s", gsToSrvId,gatSrvMsq);
         
	nRet = MsqSnd (gsToSrvId, gatSrvMsq, 0, nMsgLen+SRV_ID_LEN*2+FLD_MSQ_TYPE_LEN, MsgOut.msg_buf);
	if (nRet)
	{
		HtLog (gsLogFile, HT_LOG_MODE_ERROR, __FILE__,__LINE__,
				"MsqSnd ToSrvId[%s] error [%d][%d]",
				gsToSrvId, nRet, errno);
		exit(1);
	}

	HtLog (gsLogFile, HT_LOG_MODE_NORMAL, __FILE__,__LINE__, 
		"write msg to %s ok!", gsToSrvId);

	HtLog (gsLogFile, HT_LOG_MODE_NORMAL, __FILE__,__LINE__, 
		"begin receive msg from %s", gsSrvId);

   	return_flag=0;
   	sigset(SIGALRM, Rdmsg_to);
   	alarm(COMI_MSG_READTO);

	nMsgLen = 4096 ;
   	memset(&MsgIn,' ',sizeof(msg_def));   

    HtLog (gsLogFile, HT_LOG_MODE_NORMAL, __FILE__,__LINE__,
		"begin receive msg from %s,gatSrvMsq[%s]", gsSrvId,gatSrvMsq);

	nRet = MsqRcv (gsSrvId, gatSrvMsq, nPid, MSQ_RCV_MODE_BLOCK, 
				&nMsgLen, MsgIn.msg_buf);
	if (nRet || return_flag == 1)
	{
		HtLog (gsLogFile, HT_LOG_MODE_ERROR, __FILE__,__LINE__, 
			"receive msg from %s error = %d", gsSrvId, nRet);
    	close(socket_id);
		/* save this msg info in tbl_dumpmsg, and Dumpmsg will receive any late response */
		SaveMsg (nPid);
    	exit(1);
	}
	alarm(0);

	HtLog (gsLogFile, HT_LOG_MODE_NORMAL, __FILE__,__LINE__, 
		"receive msg from %s len = %d", gsSrvId, nMsgLen);

	nRetVal = WriteSocket( socket_id, &MsgIn.msg_buf[SRV_ID_LEN*2+FLD_MSQ_TYPE_LEN], nMsgLen-SRV_ID_LEN*2-FLD_MSQ_TYPE_LEN);
	if (nRetVal <=0) 
	{
		HtLog (gsLogFile, HT_LOG_MODE_ERROR, __FILE__,__LINE__,
			"Write socket call");
		close(socket_id);
		exit(1);
	}

	HtLog (gsLogFile, HT_LOG_MODE_NORMAL, __FILE__,__LINE__,
		"write msg to p ok!");

	close(socket_id);
}

void   Wrmsg_to()
{
	HtLog (gsLogFile, HT_LOG_MODE_NORMAL, __FILE__,__LINE__,
		"Write to message queue over time !");
	return_flag=1;
}

void   Rdmsg_to()
{
	HtLog (gsLogFile, HT_LOG_MODE_NORMAL, __FILE__,__LINE__,
		"Read from message queue over time!");
	return_flag=1;
}

int Create_socket( unsigned Port)
{
	int 	socket_id;
 	int   	RetryTimeSap = 2,nRetryFlag = 0;
        
   	memset(&local_addr,0, sizeof(local_addr));
   	local_addr.sin_port = htons(Port);
   	local_addr.sin_family = AF_INET;
	local_addr.sin_addr.s_addr = inet_addr("0.0.0.0");
	
 	while ((socket_id = socket(AF_INET, SOCK_STREAM, 0)) < 0)
   	{
		HtLog (gsLogFile, HT_LOG_MODE_ERROR, __FILE__,__LINE__,
     			"socket error time");
  		if (nRetryFlag++ == RETRYNUM)
   		{
   			RetryTimeSap *= 2;
   			nRetryFlag = 0;
			exit(1);
   		}
   		sleep(RetryTimeSap);
   	}

	Setsokopt(socket_id);

   	RetryTimeSap = 2;
   	nRetryFlag = 0;
   	while(bind(socket_id,(struct sockaddr *)&local_addr,
		sizeof(local_addr)) <0)
   	{
		HtLog (gsLogFile, HT_LOG_MODE_ERROR, __FILE__,__LINE__,
    			"Error time");
   		if (nRetryFlag++ == RETRYNUM)
   		{
   			RetryTimeSap *= 2;
   			nRetryFlag = 0;
   		}
   		sleep(RetryTimeSap);
   	}

	listen(socket_id, 5);

   	return(socket_id);
}


int ReadSocket(int socket_id_new,char *buf ,int len)  
{
	int num, nLen, I=0,iTimeout=60;
	char tmp_buf[5], Buf_head[7],tmp_buf2[5];
	char tmp_Str[2000], sBody[1024];
    if (getenv("COMM_P_TIME_OUT"))
				iTimeout=atoi (getenv("COMM_P_TIME_OUT"));
							alarm(iTimeout);
    memset(tmp_buf,0,sizeof(tmp_buf));
	num = read(socket_id_new, tmp_buf, 2);
	HtDebugString (gsLogFile, HT_LOG_MODE_ERROR, __FILE__,__LINE__,
		tmp_buf,2);

	HtLog (gsLogFile, HT_LOG_MODE_NORMAL, __FILE__,__LINE__,
		"len = %d", num);
	if ( num < 0 )
	{
        if (errno == EINTR) return;
		return (E_SBREAK);
	}

	if ( num == 0 ) return (E_SBREAK);
 
	memset(Buf_head, 0, sizeof(Buf_head));
	memset(tmp_buf2, 0, sizeof(tmp_buf2));
	HtLog (gsLogFile, HT_LOG_MODE_NORMAL, __FILE__,__LINE__,
		" tmp_buf2 = [%s], Buf_head = [%s]", tmp_buf2,Buf_head);
    Hex2Str(tmp_buf,tmp_buf2,2);
	HtLog (gsLogFile, HT_LOG_MODE_NORMAL, __FILE__,__LINE__,
		" tmp_buf2 = [%s]", tmp_buf2);
	sprintf(Buf_head,"0x%s",tmp_buf2);
	HtLog (gsLogFile, HT_LOG_MODE_NORMAL, __FILE__,__LINE__,
		"Bufhead = %s", Buf_head);
	sscanf(Buf_head, "%x", &nLen);
	HtLog (gsLogFile, HT_LOG_MODE_NORMAL, __FILE__,__LINE__,
		"nLen = %d", nLen);
	if ( nLen == 0 || nLen > 2000) return (E_SBREAK);

   	while((num=read(socket_id_new, tmp_Str, nLen))<=0)
	{
	  	if(errno==EINTR) continue;
		HtLog (gsLogFile, HT_LOG_MODE_ERROR, __FILE__,__LINE__,
			"read socket error");
		return(E_SBREAK);
        }

	memcpy(buf, tmp_Str, nLen);

	return num ;
}

int WriteSocket(int socket_id_new,char *buf, int len) 
{                                             
	int  num, iWritelen; 
	char Buf_head[5];
	char saSendBuf[BUF_SIZE];
	char sTmp[4+1]; 


  	if (len == 0) return(0);

   	memset(saSendBuf,0,sizeof(saSendBuf));
	memset(sTmp,0,sizeof(sTmp));
#if 0 
	sprintf(sTmp,"%04x", len);
	Str2Hex(sTmp,saSendBuf,4);
	memcpy(saSendBuf+2,buf,len);
 
	len = len + 2;
#else
  memcpy(saSendBuf,buf,len);
#endif
  HtDebugString (gsLogFile, HT_LOG_MODE_DEBUG, __FILE__,    __LINE__, saSendBuf, len);
    iWritelen=0; 
    for(;;)
    {
  		while((num=write(socket_id_new,&saSendBuf[iWritelen],
				len-iWritelen))<=0)
   		{	
			if (errno == EINTR) continue;
			HtLog (gsLogFile, HT_LOG_MODE_ERROR, __FILE__,__LINE__,
				"write socket");
			return(E_SBREAK);
   		}
  
   		iWritelen+=num;
		if(iWritelen>=len) break;
    }
    return(iWritelen);
}

int Setsokopt(int sdNew)
{
	struct linger soLinger;
	int soKeepAlive,soReuseAddr;

   	/*************************************************/
	/* Set socket options for new socket              */
	/*************************************************/
	soLinger.l_onoff = 0;
	soLinger.l_linger = 0;
	if( -1 == setsockopt(sdNew,
		             SOL_SOCKET,
		             SO_LINGER,
		             (char*)&soLinger,
		             sizeof(soLinger)))
	{
		HtLog (gsLogFile, HT_LOG_MODE_ERROR, __FILE__,__LINE__,
			 "set linger option failed!");
		return -1;
	}

	soKeepAlive = 0;
	if( -1 == setsockopt(sdNew,
		             SOL_SOCKET,
		             SO_KEEPALIVE,
		             &soKeepAlive,
		             (int)sizeof(soKeepAlive)))
	{
		HtLog (gsLogFile, HT_LOG_MODE_ERROR, __FILE__,__LINE__,
			"set keepalive option failed!");
		return -1;
	}

	soReuseAddr = 1;
	if( -1 == setsockopt(sdNew,
		             SOL_SOCKET,
		             SO_REUSEADDR,
		             &soReuseAddr,
		             (int)sizeof(soReuseAddr)))
	{
		HtLog (gsLogFile, HT_LOG_MODE_ERROR, __FILE__,__LINE__,
			"set reuse addr option failed!");
		return -1;
	}
	return 0;
}

void SaveMsg (long lPid)
{
	int					nReturnCode;
	Tbl_dumpmsg_Def		tTblDumpmsg;
	
	memset (&tTblDumpmsg, 0, sizeof (tTblDumpmsg));
	memcpy (tTblDumpmsg.srv_id, gsSrvId, SRV_ID_LEN);
	sprintf (tTblDumpmsg.msq_type, "%016d", lPid);
	CommonGetCurrentTime (tTblDumpmsg.creation_time);
	
	nReturnCode = DbsDumpmsg (DBS_INSERT, &tTblDumpmsg);
	if (nReturnCode)
		HtLog (gsLogFile, HT_LOG_MODE_ERROR, __FILE__,__LINE__, "DbsDumpmsg insert err, %d", nReturnCode);

}

void HandleExit (int n)
{
	DbsDisconnect ();
	HtLog( gsLogFile, HT_LOG_MODE_NORMAL, __FILE__,__LINE__, "OLDCommP exits.");
	exit( 1 );
}
