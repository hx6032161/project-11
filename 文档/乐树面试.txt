1.最近看的一本书

2.正则表达式取字符串include
	include[<"][a-zA-Z.\]*[>"]
  拓展正则表达式表达ip地址：
	
	[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}
3.git分支
	分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。

4.tcp三次握手

	第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。

第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；

第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手

5.tcp特性 tcp为什么安全 （https://blog.csdn.net/baidu_37964071/article/details/80303465）
	面向连接型的传输协议
也就是说，应用程序在使用TCP之前，必须先建立TCP传输连接，在传输数据完毕后，必须释放已建立的TCP传输连接。
	仅支持单播传输
每条TCP传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播（multicast）和广播（broadcast）传输方式。	
	TCP的数据传输数据单元称为“数据段”
	支持全双工传输
TCP允许通信双方的应用程序在任何时候都能发送数据，因为TCP连接的两端都设有缓存，用来临时存放双向通信的数据。当然，TCP可以立即发送一个数据段，也可以缓存一段时间以便一次发送更多的数据段（最大的数据段大小取决于MSS）。
	TCP连接是基于字节流的，而非报文
TCP不像UDP一样那样一个个报文独立地传输，而是在不保留报文边界的情况下以字节流方式进行传输。
	每次发送的TCP数据段大小和数据段数都是可变的
在TCP中，因为每次发送多少字节的数据不是固定的，也不是由主机当前可用缓存决定的，而是根据双方给出的窗口大小和当前网络的拥塞程度决定的（后面会介绍UDP发送的报文长度是由应用进程给出的），所以每次可以发送的TCP数据大小是不固定的。 

	可靠性（安全性）
	1.校验和
	2.序列号 按序到达
	3.确认应答（ACK）机制 TCP将每个字节的数据都进行了编号，即为序列号，每一个ACK都带有对应的确认序列号, 意思是告诉发送者, 我已经收到了哪些数据，下一次你从哪里开始发。 
	4.超时重传机制 （1）主机A发送数据给B之后, 可能因为网络拥堵等原因, 数据无法到达主机B; 
（2）主机A在一个特定时间间隔内没有收到B发来的确认应答, 会进行重发。 
（主机A未收到B发来的确认应答, 也可能是因为ACK丢失了） 
解决方法： 
这样的话，主机B就会收到很多重复数据，TCP协议需要能够识别出那些包是重复的包, 并且把重复的丢弃掉，可以利用前面提到的序列号, 很容易做到去重的效果。

那么, 超时的时间长短如何确定? 
可能有人会说, 找到一个最小的时间, 保证 “确认应答一定能在这个时间内返回”。 
但是传输的时间，随着网络环境的不同, 是有差异的。 
TCP为了保证无论在任何环境下都能比较高性能的通信, 会动态计算这个最大超时时间.。 
（1）Linux中(BSD Unix和Windows也是如此), 超时以500ms为一个单位进行控制, 每次判定超时重发的超时时间都是500ms的整数倍. 
（2）如果重发一次之后, 仍然得不到应答, 等待 2*500ms 后再进行重传. 
（3）如果仍然得不到应答, 等待 4*500ms 进行重传. 依次类推, 以指数形式递增. 
（4）累计到一定的重传次数, TCP认为网络或者对端主机出现异常, 强制关闭连接。 
	5.流量控制 1.接受方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失 
	   2.通过滑动窗口控制
	6.拥塞机制 慢启动原理：通过慢启动的方式

	性能
	1.滑动窗口 一次发送多条数据
	2.快速重传 连续收到同样的ack 重发数据
	3.延迟应答  接收端稍微等一会再应答，返回的窗口会大一些
	4.捎带应答  捎带应答意味着客户端给服务器发送消息, 服务器也会给客户端回一个 消息。那么这个时候ACK就可以搭顺风车, 和服务器回应的消息一起回给客户端。
6.http get和post的区别
 https://www.cnblogs.com/huaxingtianxia/p/5895236.html
	HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。
	GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。
	GET和POST还有一个重大区别，简单的说：
	GET产生一个TCP数据包；POST产生两个TCP数据包。
7.Linux上Core Dump文件的形成和分析
	Core，又称之为Core Dump文件，是Unix/Linux操作系统的一种机制，对于线上服务而言，Core令人闻之色变，因为出Core的过程意味着服务暂时不能正常响应，需要恢复，并且随着吐Core进程的内存空间越大，此过程可能持续很长一段时间（例如当进程占用60G+以上内存时，完整Core文件需要15分钟才能完全写到磁盘上），这期间产生的流量损失，不可估量。
	1.开启core dump
	可以使用命令ulimit开启，也可以在程序中通过setrlimit系统调用开启。
	ulimit -c 查看允许的core文件大小
	ulimit -c 1000设置大小为1000kb
	2.我们来看看如何阅读Core文件，并从中追查BUG。在Linux下，一般读取Core的命令为：
	gdb exec_file core_file
	3.bt(backtrace)命令（或者where）可以看到函数的调用栈

接下来我们继续用gdb，进行调试对应的程序。

记住几个常用的gdb命令：

l(list) ，显示源代码，并且可以看到对应的行号；

b(break)x, x是行号，表示在对应的行号位置设置断点；

p(print)x, x是变量名，表示打印变量x的值

r(run), 表示继续执行到断点的位置

n(next),表示执行下一步

c(continue),表示继续执行

q(quit)，表示退出gdb

8.常用stl https://blog.csdn.net/weixin_41162823/article/details/79759081
序列容器（一）vector
vector是最简单也是最重要的一个容器。其头文件为<vector>.
vector是数组的一种类表示，它有以下优点：自动管理内存、动态改变长度并随着元素的增减而增大或缩小。
在尾部添加元素是固定时间，在头部或中间添加或删除元素是线性时间。
vector是可反转容器。

（二）deque

头文件<deque>
在STL中deque类似vector，并且支持随机访问。区别在于：从deque起始位置插入删除元素时间是固定的。
?为了实现在deque俩段执行插入和删除操作的时间为固定这一目的，deque对象设计比vector设计更为复杂一些。因此，在序列中部执行插入删除操作时，vector更快一些。

（三）list

list表示双向链表。头文件<list>
list为可反转容器。
list不支持数组表示法和随机访问。
与矢量迭代器不同，从容器中插入或删除元素之后，链表迭代器指向的元素不变。这与链表的特性有关，删除链表中的元素并不改变其它元素位置，只是修改链接信息。（代码证明）
不同于vector，list不强调随机访问与快速访问，list强调的是元素的快速插入与删除
再次提醒：序列容器都是线性排序，因此list首尾不会相连。

（四）queue

头文件<queue>
queue不允许随机访问队列元素，不允许遍历队列，可以进行队列基本操作
可以将元素添加到队尾，从队首删除元素，查看队尾和队首的值，检查元素数目和测试队列是否为空

（五）stack

头文件<stack>
stack是一个适配器，它给底层类（默认vector）提供典型栈接口。
stack不允许随机访问栈元素，不允许遍历栈，把使用限制在定义栈的基本操作上
可以将值压入栈顶，从栈顶弹出元素，查看栈顶的值，检查元素数目，测试栈是否为空


关联容器
关联容器与序列容器有着根本性的不同，序列容器的元素是按照在容器中的位置来顺序保存和访问的，而关联容器的元素是按关键元素来保存和访问的。关联容器支持高效的关键字查找与访问。两个主要的关联容器类型是map与set。

1.set
1.1 简介：set里面每个元素只存有一个key，它支持高效的关键字查询操作。set对应数学中的“集合”。

1.2 特点：
储存同一类型的数据元素（这点和vector、queue等其他容器相同）
每个元素的值都唯一（没有重复的元素）
根据元素的值自动排列大小（有序性）
无法直接修改元素
高效的插入删除操作
2.map
2.1 简介：如果说set对应数学中的“集合”，那么map对应的就是“映射”。map是一种key-value型容器，其中key是关键字，起到索引作用，而value就是其对应的值。与set不同的是它支持下标访问。头文件是<map>

2.2 特点：

增加和删除节点对迭代器的影响很小(高效的插入与删除)
快速的查找（同set）
自动建立key-value的对应，key和value可以是任何你需要的类型
可以根据key修改value的记录
支持下标[]操作

9.什么是红黑树
二叉树的性质
二叉树有以下几个性质：TODO(上标和下标)
性质1：二叉树第i层上的结点数目最多为?2{i-1}?(i≥1)。
性质2：深度为k的二叉树至多有2{k}-1个结点(k≥1)。
性质3：包含n个结点的二叉树的高度至少为log2?(n+1)。
性质4：在任意一棵二叉树中，若终端结点的个数为n0，度为2的结点数为n2，则n0=n2+1。


红黑树的特性:
（1）每个节点或者是黑色，或者是红色。
（2）根节点是黑色。
（3）每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]
（4）如果一个节点是红色的，则它的子节点必须是黑色的。
（5）从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。

注意：
(01) 特性(3)中的叶子节点，是只为空(NIL或null)的节点。
(02) 特性(5)，确保没有一条路径会比其他路径长出俩倍。因而，红黑树是相对是接近平衡的二叉树。



10. epoll api  https://www.cnblogs.com/moonlove/archive/2012/03/17/2509150.html
? epoll可以理解为event poll，不同于忙轮询和无差别轮询，epoll之会把哪个流发生了怎样的I/O事件通知我们。此时我们对这些流的操作都是有意义的。（复杂度降低到了O(1)）
? ? 在讨论epoll的实现细节之前，先把epoll的相关操作列出：

?epoll_create用来创建epoll实例。
/usr/include/sys/epoll.h
extern int epoll_create (int __size) ;
RETURN：>0, 成功；-1, 出错
函数描述：
?????? (1) epoll_create返回的是一个文件描述符，也就是说epoll是以特殊文件的方式体现给用户
?????? (2) __size提示操作系统，用户可能要使用多少个文件描述符，该参数已经废弃，填写一个大于0的正整数

epoll_ctl(2)用来增加或移除被epoll所监听的文件描述符。
int epoll_ctl(int epfd, int op, int fd, struct 	epoll_event *event);
RETURN：0，成功；-1，出错
函数描述：
??????? (1) epfd为epoll_create创建的epoll描述符
??????? (2) epoll_ctl函数对epoll进行op类型的操作，op选项为
????????????? EPOLL_CTL_ADD，对fd描述符注册event事件
????????????? EPOLL_CTL_MOD，对fd描述符的event事件进行修改
????????????? EPOLL_CTL_DEL，删除已注册的event事件


epoll_wait(2)用来等待发生在监听描述符上的事件。它会一直阻塞直到事件发生。
#include <sys/epoll.h>
int epoll_wait(int epfd, struct epoll_event *events,
				int maxevents, int timeout);
RETURN:>0，发生事件个数；=0，时间到；-1，出错
函数描述：
?????????? epoll_wait与select函数类似，同步地等待事件发生
?????????? (1) epfd，标识epoll的文件描述符
?????????? (2) events，指向传入操作系统的一个epoll_event数组
?????????? (3) maxevents，表示传入数组的大小，必须大于0
????????? 当有事件发生，Linux会填写events结构，返回给应用程序。由于epoll_wait同步等待，有可能被信号中断，返回EINTR错误
????? 更多的函数介绍请参照man。??

Epoll的两种模式：

      1. 水平触发（LT）：使用此种模式，当数据可读的时候，epoll_wait()将会一直返回就绪事件。如果你没有处理完全部数据，并且再次在该epoll实例上调用epoll_wait()才监听描述符的时候，它将会再次返回就绪事件，因为有数据可读。ET只支持非阻塞socket。

      2. 边缘触发（ET）：使用此种模式，只能获取一次就绪通知，如果没有处理完全部数据，并且再次调用epoll_wait()的时候，它将会阻塞，因为就绪事件已经释放出来了。

ET的效能更高，但是对程序员的要求也更高。在ET模式下，我们必须一次干净而彻底地处理完所有事件。LT两种模式的socket都支持。

     传递给epoll_ctl(2)的Epoll事件结构体如下所示：

typedefunionepoll_data
{
void*ptr;
intfd;
  __uint32_t   u32;
  __uint64_t   u64;
}epoll_data_t;

structepoll_event
{
  __uint32_t   events;/* Epoll events */
epoll_data_t data;/* User data variable */
};

11.libevent https://www.cnblogs.com/nearmeng/p/4043548.html
现在的libevent版本已经到达libevent2了，其增加了多线程的支持，API函数也发生了一些微小的变化。

创建事件集
struct event_base *event_base_new(void)

创建事件
struct event?event_new(struct event_base?,evutil_socket_t ,short ,event_callback_fn,void*)
参数一：事件所在的事件集。
参数二：socket的描述符。
参数三：事件类型，其中EV_READ表示等待读事件发生，EV_WRITE表示写事件发生，或者它俩的组合，EV_SIGNAL表示需要等待事件的号码，如 果不包含上述的标志，就是超时事件或者手动激活的事件。
参数四：事件发生时需要调用的回调函数。
参数五：回调函数的参数值。

添加事件和删除事件
int event_add(struct event * ev,const struct timeval* timeout)
参数一：需要添加的事件
参数二：事件的最大等待事件，如果是NULL的话，就是永久等待
int event_del(struct event *)
参数一：需要删除的事件

分配监听事件
int event_base_dispatch(struct event_base * )
参数一：需要监视的事件集


int bufferevent_enable(struct bufferevent * bev,short event)
参数一：需要启用的bufferevent
参数二：any combination of EV|READ | EV_WRITE
int bufferevent_disable(struct bufferevent * bev,short event)
参数说明：同上

size_t bufferevent_read(struct bufferevent?bev,void?data,size_t size)
参数一：读取的buffer_event事件
参数二：存储数据的指针
参数三：数据buffer的大小
返回值：读取数据的字节数
int bufferevent_write(struct bufferevent?bev,const void?data,size_t size)
参数一：读取的buffer_event事件
参数二：存储数据的指针
参数三：要写入的数据的大小，字节数



